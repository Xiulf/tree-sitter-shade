module Main =

import Prim

malloc () :: Ptr a = (C.malloc <| size_of (Proxy :: Proxy a)) |> transmute

test :: ref abc

impl Index (Slice t) (Int i) t =
    index slice idx =
        ptr, len = transmute slice :: Ptr t, Uptr
        ptr = ptr_offset ptr idx
        ptr_read ptr

@main
main () =
    a, b = 3
    x = Some 4
    x = 2
    y = 5
    f = fn a -> a + x - y
    y = bind x fn a -> pure (a + b)
    fib (6 :: Int32)
    a = f 6
    b = f 3
    C.fdf 4 . cast 3 4 . D.other
    a + b


test x :: Str =
    if x then return "then"
    "else"

other = do
    x <- pure 0
    <- pure 4
    pure x


fib x :: Int32 =
    match x with
    | 0 -> 0
    | 1 -> 1
    | n -> fib (n - 1) + fib (n - 2)


trait Add a =
    add :: a, a -> a

trait Sub a =
    sub :: a, a -> a


infixl 6 (+) = add
infixl 6 (-) = sub


impl Add (Int a) =
    add a b = Intrinsics.iadd a b

impl Sub (Int a) =
    sub a b = Intrinsics.isub a b


type Option t =
    | None
    | Some t

type List t =
    | Nil
    | Cons t (List t)


trait Monoid m =
    pure :: t -> m t

impl Monoid Option =
    pure = Some

impl Monoid List =
    pure x = Cons x Nil


trait Monad m where Monoid m =
    @lang = "bind-fn"
    bind :: m a, (a -> m b) -> m b

impl Monad Option =
    bind o f =
        match o with
        | Some x -> f x
        | None -> None

impl Monad List =
    bind l f =
        match l with
        | Nil -> Nil
        | Cons x xs -> append (f x) (bind xs f)

append a b =
    match a with
    | Nil -> b
    | Cons x xs -> Cons x (append xs b)
